The MAX_STRING script


REFRESHER: Pipe

Pipe is used to take the output of command 1 as the input of command 2:

command1 | command 2
e.g. ls folder | less                               (takes the listed contents over folder and pipes it into the less command generating a second screen output)


extra commands:

tail -4 file1.txt                                   (Output the last 4 lines of a specified file to the screen)

so say you have folder 1 containing 5 txt folders 1-5. 

ls folder1 | tail -3                                (Output the last 3 names of files in the folder to the screen i.e. 3.txt, 4.txt and 5.txt)

You can pipe multiple times into multiple commands e.g.

ls folder1 | tail -3 | less                         (Output the last 3 names of files in the folder to a second screen i.e. 3.txt, 4.txt and 5.txt)

ls folder1 | tail -3 | less | sort >  newfile.txt   (Output to a newfile the alphebetically sorted last three filenames of the listed directory contents)


The WC command or Wordcount Command

wc filename.txt                                                                 #runs the wc command for the designated file

<Number of New Lines>       <number of words>       <number of Characters>    <filename>                #Output

****IMPORTANT****
The first number it outputs is the number of NEW lines. 
Think of it as the ammount of times you hit return. 
Therefore, the first line of the file isn't counted. 

SIMILARLY the ammount of characters often gives us one MORE than we should have. 
Therefore we have to adjust our scripts accordingly to compensate for these quirks. 

Passing parameters into the wc command helps us differentiate the output values

wc -l filename.txt                  #outputs number of new lines in a file
wc -w filename.txt                  #outputs number of words in a file
wc -c filename.txt                  #outputs number of bytes in a file (usually same as characters)
wc -m filename.txt                  #outputs number of characters in a file (usually same as bytes)

we can pipe directly into wc using echo:

echo "abc defg hijk" | wc -l
1                                   #in this case it recognises 1 line
echo "abc defg hijk" | wc -w
3                                   #counts 3 words
echo "abc defg hijk" | wc -c
13                                  #counts 13 characters, remember space is a character in this case


A practical use for wc is to count the number of items inside a folder e.g. 

ls -l | wc -l                       #ls -l would list the files in a directory with full information to the screen, istead we pipe the output into the wc command with -l to count the number of lines
                                    #since the output ls-l designates one line per file, counting the number of lines will count the number of files
                                    #in this example the line number is actually over by 1, this is because the ls -l command adds its own line at the start of the information block

If we wanted to specifically count the number of txt files in a folder instead we could run

ls -l *txt | wc -l                  #in this case it ls -l doesn't add an extra line so no manipulation would be needed. 

It seems like when it comes to piping into wc, it is best practise to check what is being piped manually, don't just assume the count is correct, go back and check. 




The Strings command

The strings command takes a file as input and returns each string of printable character inside that file. 
It's main use is to extract the text part of a file whilst disregarding the non-text part of a file.

For example there are some binary files that contain text as well as binary, in this case strings could extract the text and bypass the binary. 
It is very useful to gather all the strings contained in a simple text file in a similar way to cat

strings filename.txt            #returns the printable characters inside the specified file

we can also store this output as a variable, or pipe it into another command. 

a=$(strings filename.txt)       #stores the output of strings as variable a
strings filename.txt | wc -l    #gives a line count of all the printable characters in the specified file 

It's important to differentiate between cat and strings. 
cat will print EVERY line of a file
strings will print ONLY the printable lines

For example, we have a note called Intro-and-Basics.txt
If we pipe the cat output into a line count command we would get the following:

cat Intro-and-Basics.txt | wc -l
313

Whereas If we pipe the strings output into a line count command we would get the following:

strings Intro-and-Basics.txt | wc -l
181

This is because in this example, strings ommits the blank return lines


The useful part of the strings command is it's delicacy. 
By default the strings command only takes strings that are a minimum of 4 characters long. 
We can change that by passing the parameter -n into the strings command and specifying the minimum character length. 

strings -n 3 filename.txt           #now strings will consider any printable strings of a minimum 3 characters long
strings -n 2 filename.txt           #now strings will consider any printable strings of a minimum 2 characters long
strings -n 1 filename.txt           #now strings will consider any printable strings of a minimum 1 characters long



The MAX_String Script

#! /bin/bash

echo "***** MAX STRING Script *****"

#Creation of a script that counts the character length of each string in a given file and outputs the longest string and the length of that string

file_name="$1"                                                  #Store first parameter as variable "file_name"

echo "The selected file is: $file_name"

if [ -r "$file_name" ]; then                                    #If the file exists and is readable then proceed

    s=$(strings "$file_name");                                  #stores each string in the file as variable s

    ref_word='';                                                #sets reference word (ref_word) to blank
    max_len=0;                                                  #sets largest character count (max_len) to 0

    for i in $s; do                                             #for loop through each string in variable s

        len=$(echo "$i" | wc -c);                               #pipes the current string into the character count and stores as variable "len", character count
                                                                #adds one to the actual legnth of the word so has to be adjusted i.e. subtract 1 
        len=$(bc <<< "$len -1")                                 #if we could call our alias "calc" into the script the line would look like this: len=$(calc $len -1)
                                                                #However it is just as effective to redirect "$len -1" via "here string" into the bc environment and
                                                                #overwrite the value of $len
                                                                #There is a built in shell operation to count the character length of a variable: len=${#i} which is 
                                                                #significantly faster to run than the manual way we have done here
        echo "$i ---> $len"                                     #echoes the current string and its length

        if [ $len -gt $max_len ]; then                          #if the length of the current string is greater than the value of "max_len"
            max_len=$len                                        #set the value of max_len to this new longest length
            ref_word=$i                                         #set the value of ref_word to this new longest word
        fi
     
    done
    echo "***************************"
    echo "Max length is: $max_len"
    echo "Longest Word is: $ref_word"   
else                                                            #If the file is not readable or doesn't exist, print negative confirmation
    echo "File not readable/non-existent"                       
fi

#The script as written does not account for multiple strings of the same longest legnth, something to consider for later projects



