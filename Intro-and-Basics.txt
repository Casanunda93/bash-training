Terminal Commands

Navigation

ls                                          (List the contents of current directory)
ls "foldername"                             (list contents of specified folder)
ls -a                                       (shows everything in current directory including hidden files)
ls -l                                       (lists in long format, more detail about contents, - at start means file, d at start means directory)
ls -F                                       (lists with a slash at the end of each foldername, * to each executable file)
ls -ld                                      (list long format data about the folder without listing the contents)

Remember, these options can be combined e.g. ls -aF would show all hidden files and folders with a slash at the end of each folder etc)


open .                                      (Opens a GUI of the current directory)
open "filename" or "foldername"             (Opens GUI of the specified file or folder)
code .                                      (Opens all files in the directory in Visual Studios)
code "filename" or "foldername"             (Opens specified file or folder in Visual Studios)
pwd                                         (Print Working Directory)
cd "Foldername"                             (Change directory to specified folder)
cd                                          (leaving it blank after cd will always take you to the home folder)
cd ..                                       (Move backwards one directory)
cd -                                        (move to previous location)
q                                           (quit when in screen that has "END")


Creating Files and Folders

touch                                       (create a file i.e. touch adam.txt)
touch <file>                                (updates last edited time of specified file)
mkdir                                       (create a new folder)
mkdir -p <folder1>/<folder2>                (creates folder 1, then creates folder 2 inside folder 1)
cp <file-name> <new-file-name>              (makes a copy of the original file with the specified name)
cp <file-name> <directory>                  (makes a copy of the file in the specified directory)
cp -v                                       (makes a copy and displays an output confirming it)
cp -i                                       (makes a copy and questions any overwrites if copying something that already exists)
cp -r <directory-name> <other-directory>    (copies the directory specified into another directory)

Deleting Files and Folders

rm                                          (removes file permanently)
rm -rf                                      (removes a folder permanently)


Moving files

mv <file-name> <directory>                  (moves the file to the specified directory)
mv <directory> <new-directory>              (moves the directory into another directory)
mv <file-name> <new-name>                   (renames a files)

Using a Hash allows you to write anything in the terminal without generating an error, it's a comment function. 

clear                                       (wipes your terminal screen)

Accessing Files

cat <file>                                  (Prints contents of file to terminal)
cat -n <file>                               (prints contents of file to terminal with each line numbered)
**We can cat multiple files**
more <file>                                 (prints contents of file to terminal with pointer at start of file contents)
less <file>                                 (prints contents of file to terminal on seperate screen, q to end)
/"search term"                              (while in less mode, allows you to search for particular words, n for next, b for back)


echo "sentence"                             (prints contents of quotes to screen)
echo -e "words \n words"                    (prints contents of quotes to screen, -e and \n allows a new line to be made between the two words)
echo -e "words \t words"                    (prints contents of quotes to screen, -e and \t allows a tab to be made between the two words)
echo -e "words \v words"                    (prints contents of quotes to screen, -e and \c allows a verticle tab to be made between the two words)


Wildcards
*                                           (any characters e.g. ls *.txt would list all .txt files in a directory, ls d* would list all files starting with d)
?                                           (any SINGLE character e.g. ls ??.txt would list all txt files with 2 characters as their name)
[abc]                                       (any file that start with a or b or c)
!                                           (exclude e.g. [!abc] so exclude abc)
[[:alpha:]]                                 (all letters)
[[:digit:]]                                 (all numbers)
[[:lower:]]                                 (all lower case letters)
[[:upper:]]                                 (all upper case letters)


Variables

We can set any variables we want via command line e.g. 
    bob=130
if we want to see what bob is then equal to we use echo with dollar sign:
    echo ${bob}                             (returns value of bob)
if we wanted to unset the variable bob we use:
    unset bob

echo ${#variable}                           (the use of # returns the legnth of the string i.e. number of characters in the variable)

echo ${variable:number}                     (displays the value of the variable starting at the character specified by the number)

echo ${variable:number1:number2}            (displays the value of the variable starting at the character specified by the number1 for the number of characters specified
                                             by number 2)

echo ${variable: negative-number}           (displays the value of the variable starting at the character specified by the number from the end of the string, have to use
                                             a space to make this work)


Variable Manipulation

echo ${variable#symbol}                     (displays the value of the variable with the specified symbol removed from the starting position if present)
echo ${variable#*symbol}                    (displays the value of the variable with all characters removed up to the specified symbol)
echo ${variable%symbol}                     (displays the value of the variable with the specified symbol removed from the end position if present)
echo ${variable%symbol*}                    (displays the value of the variable with all characters removed up to the specified symbol starting from end position)


Permanent Variables

When we log in to the computer, the login script is run. 
We can make changes to this script in order to create permanent variables i.e. fixed variables that will remain even if terminal is closed. 

This file is called .bashrc on linux and is hidden in the home folder
I have added a personal welcome message to the file as an example which appears whenever you open terminal. 


Read from input: read

read a                                      (store the following input into variable a)
read -p "Input Message" a                   (Print the quotation and then store the following input as variable a)

***If we don't speicify a variable to "read" it will still store the following input as an environment variable called REPLY***


Redirecting the output

When you type in a command, the flow of that command from input to output is:

Command -------> STDOUT file --------> Screen 

We can therefore redirect the flow from STDOUT to another place, another file etc, the command of which is "1>" or ">"

e.g.

Say we want to redirect the "ls -l" command so that it writes the result to a file rather than output to the screen
ls -l 1> file.txt or ls -l > file.txt

if you redirect to a file that does not exist, the file will be generated. 
This is a common use for the echo command. 
*** REDIRECTION OVERWRITES THE CONTENTS OF A FILE UNLESS SPECIFED***

In order to avoid overwriting data we can perform an append redirect using the "1>>" or ">>" command

example 2:

say you have 2 text files, file 1 and file 2, and you want to combine their contents into a third file:

cat file1.txt file2.txt 1> file3.txt

we can also use cat with no extra options, redirected to a file, this prints whatever we type to a file i.e.
cat 1> file.txt

This will continue until you run "^C" to exit the input prompt 
**** PRACTISE THIS BEFORE USING IT ****



Redirecting errors

When you type in a command that creates an error, the flow of that command from input to output is:

Command -------> STDERR file --------> Screen 

Again we can redirect the error message to another place or file using "2>"

If we we want to redirect both the output and the error message to the same file we can instead use "&>"

If we we want to redirect both the output and the error message to DIFFERENT files, we would have to use 1> and 2> pointing at different placed e.g:

say we have 2 files of data, and we want to store ls info about the files in one new file and error in another
ls -l file1.txt file2.txt file3.txt 1> output.txt 2> error.txt

because we only have 2 starting files, asking about a third will throw up an error which will be printed to error.txt. 
Meanwhile info about file1 and file2 will be printed to output.txt

There is a folder in the unix system called /dev/null which is a place on unix to send things you want to dissapear. 
This may be handy to redirect useless messages



Pipe

Pipe is used to take the output of command 1 as the input of command 2:

command1 | command 2

e.g. ls folder | less 

takes the listed contents over folder and pipes it into the less command generating a second screen output


extra commands:

tail -4 file1.txt                       (Output the last 4 lines of a specified file to the screen)

so say you have folder 1 containing 5 txt folders 1-5. 

ls folder1 | tail -3                    (Outout the last 3 names of files in the folder to the screen i.e. 3.txt, 4.txt and 5.txt)

You can pipe multiple times into multiple commands 











