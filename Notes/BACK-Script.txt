The BACK Script

Repeated use of .. to move back from a folder is inefficient. 
We could write a script to create the command "back #" where # is the number of steps backwards you want to take.

To do so we need to talk about a few concepts.


Subshells

When we open a terminal, we run the initial bash script to open a BASH shell. 
if you run the command "exit" you leave the BASH shell, meaning you cannot do anything else in your terminal

subshells are shells that can be opened from within the initial bash shell. 

bash or /bin/bash                       (opens a subshell)
exit                                    (leaves current shell i.e. if in a subshell, exits that subshell)

You can enter as many subshells as you want 

if you create a file in a subshell, the file still exists in the main shell
However variables set in a subshell are not accessible from the main shell

This is key, as when we create a script, the initial line #! /bin/bash means that the script will run in a subshell. 
This means variables set in the script are not accessible from the main shell. 



The Source Command

source <Script.sh>                      (Forces the specified script to run in the CURRENT shell rather than in a subshell)

By running source, any variables specified in the script are now accessible by the current shell

*** alternative syntax is . <Script.sh> but this is very much frowned upon ***


The Type Command

there are different types of commands:
- executable programs e.g. cat or scripts we write etc
- shell builtins e.d. cd 
- alias e.g. commands we create ourselves

type <command>                          (prints the type description of the specified command to screen, for aliases it also describes the alias)



Alias in Bash

An alias is a command we create ourselves. For example we might want to create a command to replace having to type ls-l every time 

alias <alias-name>='command'            (creates an alias name for a specific command)
e.g. alias ll='ls-l'                    (creates the alias "ll" to run the command "ls-l")

alias                                   (alias with no further input will list all aliases we have)
unalias <alias-name>                    (removes specified alias)

Permanent Aliases can be made in the same way as permanent variables.
When we log in to the computer, the login script is run. 
We can make changes to this script in order to create permanent aliases i.e. fixed aliases that will remain even if terminal is closed. 
This file is called .bashrc on linux and is hidden in the home folder
To open the file in our text editor we run:
code ~/.bashrc



Command Substitution/Expansion

which <command>                         (tells us the path of the specified command)
e.g. which cd                           (tells us the path of "cd")
Command substitution of expansion is where you use the output of one command as the input of another
e.g.
ls -l $(which cd)                       (runs "which cd", takes the path and inputs it into the ls-l command)

This concept is useful for the storing of a command output as a variable
e.g. 
a=$(pwd)                                (runs pwd, then stored the output of pwd as variable a)

date                                    (gives precise time and date)
d=$(date)                               (stores the time and date at the moment of execution as variable d)



Scripts with Parameters

We already know that every script in our terminal is an executable command e.g. "ls"
It can also take parameters such a folder name or specific options e.g. "ls ~/" would list all files and folders in the home folder or "ls -a" shows all files including hidden ones. 

We can also pass parameters into a shell script, For example:

Say we have a script called parameters.sh that contains the following

 #! /bin/bash

echo "####################################"

echo "This is parameter 1:  $1"


If we run the script as is i.e. ./parameters.sh then the returned echo would be blank. 
However, if we pass a parameter into the run command, the parameter populates the script as $1

e.g.

./parameters.sh ADAM

"####################################
This is parameter 1:  ADAM"




This works for multiple parameters, for instance if we have multiple lines in the script:
#! /bin/bash

echo "####################################"

echo "This is parameter 1:  $1"
echo "This is parameter 2:  $2"
echo "This is parameter 3:  $3"
echo "This is parameter 4:  $4"
echo "This is parameter 5:  $5"

And we run ./parameters.sh Q W E R T

The output we get is:

####################################
This is parameter 1:  Q
This is parameter 2:  W
This is parameter 3:  E
This is parameter 4:  R
This is parameter 5:  T

We can also pass parameters with spaces as one parameter as long as we enclose them in " "
e.g.
./parameters.sh Q W E R "Adam Is The Best"
####################################
This is parameter 1:  Q
This is parameter 2:  W
This is parameter 3:  E
This is parameter 4:  R
This is parameter 5:  Adam Is The Best


*** BE CAREFUL: ANY PARAMETER AFTER THE VALUE OF 9 HAS TO BE ENCLOSED IN {} OTHERWISE IT WILL LOOK INTO VALUE 1 ***

Extra tips and tricks:
$# outputs the number of parameters we have
e.g. echo "The number of parameters we have is: $# "

$@ outputs all the parameters we have
e.g. echo "These are our parameters: $@ "
Good for for loops

*** $@ and $* do the same thing UNLESS they are inside "", "$*" interprets all parameters as one whole string, bad for loops ***




