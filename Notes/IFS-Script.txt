The IFS Script

Reading multiple variables:

read a b c d                #We can use read to take the following input and store it as multiple variables
10 20 30 40                 #Each value is separated by a space and so is stored in one of the variables

echo $a
10
echo $b
20
echo $c
30
echo $d
40

However if we set 4 variable but give more than 4 values to store the following happens:

read a b c d                
10 20 30 40 50 60 70 80                 

echo $a
10
echo $b
20
echo $c
30
echo $d
40 50 60 70 80


The important thing about the read command is that we cannot just pipe ( | ) as with other commands, we have to redirect using here doc or string

read a <<< "grean 45"               #redirect here string as input to read a (store string as variable a)
echo &a
green 45                            #output

However we can set multiple variables this way:

read a b c d e <<< "grean 45 50 55 60"               #redirect here string as input to read a (store string as variables a-e where each input is separated by space)
echo &a
green                               
echo $b
45
echo $c
50
echo $d
55
echo $e
60


The Grep Command - refresher


grep <search term> <filename>                       #searches specifed file for specified term 

Be Aware: Grep is case sensitive for the terms you search, to avoid this issue use:

grep -i <search term> <filename>

we can also pipe into grep
ls | grep t                         #lists all files in current directory with t in the name

If we want to search for everything OTHER than the search term we can use the -v option:
grep -v <search term> <filename>    #searches file for everything other than the search term
ls | grep -v t                      #lists all files NOT containing t in the name 




The Internal Field Separator 

As we saw above when we read multiple values as multiple variables, the values were separated by a space. This is because the standarad IFS is a space. 
If we were to input the variables as "green;45;50;55;60" it would instead store the entire string into variable a because there is no space to separate

If we want to see what the IFS is currently we can run the command:
echo $IFS                       #Echoes the value of the IFS

If we want to change the IFS we can run
IFS="_"                         #Changes the IFS to underscore
WARNING: IFS is an environment variable, manipulating IFS is fine but we want to make sure we put it back to standard when we are done

A good way of doing this is to start the script with:
old_IFS=$IFS                    #stores teh standard IFS setting in a variable

Then maniupulate i.e.
IFS=";"                         #sets IFS to ;

Then when we are done:

IFS=$old_IFS                    #Resets IFS to original settings



The IFS Script

We want to be able to read complex files, for many linux files spaces are not used to seperate information for example the file /etc/passwd uses : as a separator

For example one of the lines in the file is:
tcpdump:x:115:120::/nonexistent:/usr/sbin/nologin

#! /bin/bash

#Creation of a script that allows the user to search the file /etc/passwd for specific usernames and output the data as seperate fields
#The file uses colon as its field seperator so we need to manipulate IFS in this script

FILE=/etc/passwd                                                    #sets file directory as variable FILE

read -p "Enter the name of the Username: " username                 #outputs quote then stores following input as variable username

info=$(grep "$username" $FILE)                                      #greps the username variable into the file variable and stores as info variable 
                                                                    #(searches file for username)
echo "$info"

old_IFS=$IFS                                                        #stores standard IFS as variable
IFS=":"                                                             #changes IFS to :

if [ -n "$info" ]; then                                             #If the info variable is NOT empty (the username was found in the file)then
    read user pw uid gid full home shell <<< "$info"                #Here string redirect the info variable into the read command as the 7 new variables and echo
    echo "User: $user" 
    echo "Pass: $pw" 
    echo "UID: $uid" 
    echo "GID: $gid"
    echo "Name: $full" 
    echo "Home: $home"
    echo "Shell: $shell"
else                                                                #Otherwise if the info variable is empty (the username was not found in the file) then
    echo "User Not Found"
fi 

IFS=$old_IFS                                                        #Revert IFS back to starting conditions





