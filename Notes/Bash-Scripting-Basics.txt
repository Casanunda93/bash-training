To make a bash script:

create a file
open that file in the text editor of your choice (I prefer VS)
add the line:
    #! /bin/bash            (this says "whatever you find in this file, interpret it with bash) (Not strictly neccessary but good practise to ensure things run smoothly)
 
We then need to change the permissions on the file to make it executable:

chmod +x filename

To run the file we run:
    ./filename



If functions on Strings

if functions have to start with "if" and end with "fi"
it is good practice to wrap strings between speech marks
always leave space between the square brackets and condition

Example:

read -p "say something to greet me! " d                     (Print the quotation and then store the following input as variable d)
echo "----------------------"

if [ "$d" == "hello" ]; then                                (starting if function, ends in semi colon followed by "then", "==" means is equal)
    echo "Hello To You"
elif [ "$d" == "good morning" ]; then                       (else if functions use "elif")
    echo "Good Morning To You"
elif [ "$d" == "good afternoon" ]; then
    echo "Good Afternoon To You"
elif [ "$d" == "good evening" ]; then
    echo "Good Evening To You"
elif [ "$d" == "goodbye" ]; then
    echo "Goodbye To You"
else 
    echo "Have a Nice Day"
fi

echo -e "\nThe Program Continues"


we can use the syntax " if [ -z "$d" ]; then  "  to check if a variable is empty
we can use the syntax " if [ -n "$d" ]; then  "  to check if a variable is NON-empty

! can be used a negation, i.e. is NOT equal or is NOT empty 
we can use the syntax " if [ "$d" != "hello" ]; then " to say if d does NOT equal
we can use the syntax " if [ ! -z "$d" ]; then  "  to check if a variable is NON-empty




If functions on numbers

Examples:

read -p "give me a number " numb                                (Print the quotation and then store the following input as variable "numb")
echo "-----------------------"



if [ $numb -eq 18 ]; then                                       ("-eq" is equal to)
    echo "It is 18"
else 
    echo "not 18"
fi

if [ $numb -ne 18 ]; then                                       ("-ne" is NOT equal to)
    echo "Really not 18"
fi

if [ $numb -lt 18 ]; then                                       ("-lt" is lower than)
    echo "It is lower than 18"
fi

if [ $numb -gt 18 ]; then                                       ("-gt" is lower than)
    echo "It is greater than 18"
fi

if [ $numb -le 18 ]; then                                       ("-le" is lower than or equal to)
    echo "It is lower than or equal to 18"
fi

if [ $numb -ge 18 ]; then                                       ("-ge" is greater than or equal to)
    echo "It is greater than or equal to 18"
fi




If functions on files

read -p "give me a filename " myfile                            (Print the quotation and then store the following input as variable myfile)
echo "-----------------------"

if [ -e "$myfile" ]; then                                       ("-e" checks to see if a file exists)
    echo "the file exists"
else
    echo "The file doesn't exist"
fi

if [ -d "$myfile" ]; then                                       ("-d" checks to see if a file exists and is a directory)
    echo "The file exists and is a directory"
fi

if [ -f "$myfile" ]; then                                       ("-f" checks to see if a file exists and is a regular file)
    echo "The file exists and is a regular file"
fi

if [ -s "$myfile" ]; then                                       ("-s" checks to see if a file exists and is not empty i.e. length greater than 0)
    echo "The file exists and has a length greater than 0"
fi

if [ -r "$myfile" ]; then                                       ("-r" checks to see if a file exists and is readable)
    echo "The file exists and is readable"
fi

if [ -w "$myfile" ]; then                                       ("-w" checks to see if a file exists and is writable)
    echo "The file exists and is writable"
fi

if [ -x "$myfile" ]; then                                       ("-x" checks to see if a file exists and is executable)
    echo "The file exists and is executable"
fi

*** remember, we can use the negate syntax, "!" to invert any of the above queries ***



Logic Conditions


Examples with numbers:

numb=4;

if [ $numb -gt 3 -a $numb -lt 10 ]; then                        ("-a" creates an AND condition, i.e. greater than 3 AND lower than 10)
    echo "number is greater than 3 and lower than 10"
fi

if [ $numb -lt 3 -o $numb -gt 10 ]; then                        ("-o" creates an OR condition, i.e. lower than 3 OR greater than 10)
    echo "number is lower than 3 or greater than 10"
fi



Example with files: to see if a file is executable and NON-Empty

myfile="Frank.sh"

if [ -s "$myfile" -a -x "$myfile" ]; then
    echo "$myfile is NON-Empty and Executable"
fi




Modern If Functions syntax

Use double square brackets: [[ ]]
Use && for AND operators
Use || for OR operators
So re-writing the above:

numb=12;

if [[ $numb -gt 3 && $numb -lt 10 ]]; then                        #("&&" creates an AND condition, i.e. greater than 3 AND lower than 10)
    echo "number is greater than 3 and lower than 10"
fi

if [[ $numb -lt 3 || $numb -gt 10 ]]; then                        #("||" creates an OR condition, i.e. lower than 3 OR greater than 10)
    echo "number is lower than 3 or greater than 10"
fi

#Example with files: to look for a file that is executable and NON-Empty

myfile="Frank.sh"

if [[ -s "$myfile" && -x "$myfile" ]]; then
    echo "$myfile is NON-Empty and Executable"
fi



For Loop



