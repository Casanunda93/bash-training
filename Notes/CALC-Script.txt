Arithmetic In Bash

Long story short, basic arithmetic in bash is awful. 
It doesn't work. 
We don't have access to answers with decimal points. 
The syntax is also terrible:
echo $((3 +5))                                      #Prints the answer to 3+5
But it also doesn't really work for division for answers that aren't whole numbers.

Long story short, we have to use a different environment called the bc environment. 

bc                                                  #enters computational environment

Once in the bc environment we can perform normal calculations:
 + - * / ^ sqrt()

However when we look at division, agin it seems to spit out the wrong answer

4/3 = 1 ?????

Fortunately in this envronment we can set the ammout of decimal places we want to go to by manipulating the "scale" variable. 

scale=2             #sets the calculator to 2 decimal places

to leave the bc environment we type:

quit                #leaves bc environment

As with all executable commands we can pass in parameters:

bc -l               #opens the bc environment and sets scale to 20

Another Pro of the bc environement is that you can set variables. This makes it possible to perform algebraic equitions:

a=12
b=.32

a*b
3.84

It can also be used for boolean expression:

10<3                #10 is less than 3 returns 0 i.e. FALSE
0

10<20               #10 is less than 20 returns 1 i.e TRUE
1

(10<20) || (1<10)           #10 is less than 20 OR 1 is less than 10 returns 1 i.e. TRUE
1

(10<20) || (10<3)           #10 is less than 20 OR 10 is less than 3 returns 1 i.e. TRUE
1

(10<20) && (10<3)           #10 is less than 20 AND 10 is less than 3 returns 0 i.e. FALSE
0

Think about this in combination with variables inputed via script. 


Another useful command:

length(123)                 #return the length of the inputted integer i.e the length of 123 in characters is 3
3

scale(123.3232)             #similarly scale can return the number of decimals i.e. the number of characters after the decimal point of 123.3232 is 4
4

Everytime we run the bc environment we output a copyright warning/label
For the purposes of scripting this is worth bypassing:

bc -q                       #opens the bc environment in "Quiet mode" i.e. without the copyright label




Redirecting input

Example:

We can use the command "cat" without an additional arguement, when we do this, the terminal will read whatever is typed next and then print it on the next line, this will continue untill the cat command is
manually stopped via ^C i.e.

cat                         #starts the cat process

adamfox2k25                 #input
adamfox2k25                 #output

^C
 
This isn't massively useful, however we can redirect the input instead. 

cat << _EOF_                #this is the "here document" command, it will redirect whatever is typed next as an input of cat until the end of file symbol is enterred, in this case "_EOF_"
> Hello                     #input
> My Name is Adam           #input
> Look at me go             #input
> _EOF_                     #end of file symbol
Hello                       #output
My Name is Adam             #output
Look at me go               #output

The here document symbol << can be thought of as whatever is typed next is a document of data to be used as an input into the previous command.
It can be used with many commands including bc

bc << _EOF_                 #redirrected bc command, sends the following input "document" to the bc environment without opening the bc environment
> 3+2                       #input
> 4*5                       #input
> a=10                      #input
> 20*a                      #input
> _EOF_                     #end of file symbol
5                           #output
20                          #output
200                         #output

Another method for redirection is the "Here string" redirection

Similar to here document, here string redirects the following string as an input into the previous command e.g.

cat <<< "Adam is the best"              #symbol for redirect string is <<<, takes the string that follows as an input to cat
Adam is the best                        #output

The above seems simple but we could do the same with variables:

s="string example"                      #sets variable value as inputted string
cat <<< $s                              #redirects variable contents as an input of cat
string example                          #output

As with here document, here string also works with the bc command
bc <<< "3*4"                            #string redirected into bc
12                                      #output

Another example:

q="3*7 +5"                              #calculation set as variable
bc <<< $q                               #variable contents redirected as input to bc
26                                      #output


One useful use of this command is the interaction with the read command:

read w <<< "I sure do like the letter w :)"             #redirects the string to the read command, which stores the input as variable w
echo $w                                                 #echoes variable w
I sure do like the letter w :)                          #output





Scripts with Parameters - Refresher

We already know that every script in our terminal is an executable command e.g. "ls"
It can also take parameters such a folder name or specific options e.g. "ls ~/" would list all files and folders in the home folder or "ls -a" shows all files including hidden ones. 

We can also pass parameters into a shell script, For example:

Say we have a script called parameters.sh that contains the following

 #! /bin/bash

echo "####################################"

echo "This is parameter 1:  $1"


If we run the script as is i.e. ./parameters.sh then the returned echo would be blank. 
However, if we pass a parameter into the run command, the parameter populates the script as $1

e.g.

./parameters.sh ADAM

"####################################
This is parameter 1:  ADAM"


This works for multiple parameters, for instance if we have multiple lines in the script:
#! /bin/bash

echo "####################################"

echo "This is parameter 1:  $1"
echo "This is parameter 2:  $2"
echo "This is parameter 3:  $3"
echo "This is parameter 4:  $4"
echo "This is parameter 5:  $5"

And we run ./parameters.sh Q W E R T

The output we get is:

####################################
This is parameter 1:  Q
This is parameter 2:  W
This is parameter 3:  E
This is parameter 4:  R
This is parameter 5:  T

We can also pass parameters with spaces as one parameter as long as we enclose them in " "
e.g.
./parameters.sh Q W E R "Adam Is The Best"
####################################
This is parameter 1:  Q
This is parameter 2:  W
This is parameter 3:  E
This is parameter 4:  R
This is parameter 5:  Adam Is The Best


*** BE CAREFUL: ANY PARAMETER AFTER THE VALUE OF 9 HAS TO BE ENCLOSED IN {} OTHERWISE IT WILL LOOK INTO VALUE 1 ***

Extra tips and tricks:
$# outputs the number of parameters we have
e.g. echo "The number of parameters we have is: $# "

$@ outputs all the parameters we have
e.g. echo "These are our parameters: $@ "
Good for for loops

*** $@ and $* do the same thing UNLESS they are inside "", "$*" interprets all parameters as one whole string, bad for loops ***



Parameter Shifting

the "shift" command allows us to point the variable that the parameter is stored to to the next in the line e.g.

#! /bin/bash

echo "####################################"

echo "This is parameter 1:  $1"
shift
echo "This is parameter 2:  $2"
echo "This is parameter 3:  $3"
echo "This is parameter 4:  $4"
echo "This is parameter 5:  $5"

And we run ./parameters.sh Q W E R T

The output we get is:

####################################
This is parameter 1:  Q
This is parameter 2:  E
This is parameter 3:  R
This is parameter 4:  T
This is parameter 5:  

As we can see, 1 still points at the first parameter, but 2 now points at the 3rd, 3 points at 4th etc

It is also possible to shift by a different integer:

#! /bin/bash

echo "####################################"

echo "This is parameter 1:  $1"
shift 2
echo "This is parameter 2:  $2"
echo "This is parameter 3:  $3"
echo "This is parameter 4:  $4"
echo "This is parameter 5:  $5"

And we run ./parameters.sh Q W E R T

The output we get is:

####################################
This is parameter 1:  Q
This is parameter 2:  R
This is parameter 3:  T
This is parameter 4:  
This is parameter 5:  


Additional info: $0 will return the absolute path of the script


